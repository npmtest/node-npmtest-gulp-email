{"/home/travis/build/npmtest/node-npmtest-gulp-email/test.js":"/* istanbul instrument in package npmtest_gulp_email */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-email/lib.npmtest_gulp_email.js":"/* istanbul instrument in package npmtest_gulp_email */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_email = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_email = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-email/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-email && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_email */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_email\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_email.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_email.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_email.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_email.__dirname + '/lib.npmtest_gulp_email.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-email/node_modules/gulp-email/index.js":"/**\n * Module dependencies.\n */\n\nvar GulpEmail = require('./lib/gulp-email');\n\n\n/**\n * Expose library.\n */\n\nmodule.exports = function(options, callback){\n\tvar gulpEmail = new GulpEmail(options, callback);\n\treturn gulpEmail;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-email/node_modules/gulp-email/lib/gulp-email.js":"/**\n * Module dependencies.\n */\n\nvar Transform = require('stream').Transform,\n\tPath = require(\"path\"),\n\tBuffer = require('buffer').Buffer,\n\tFile = require('vinyl'),\n\tchalk = require('chalk'),\n\tfs = require('fs'),\n\tutils = require('./utils'),\n\tExecute = require('./execute'),\n\textend = require('util')._extend;\n\n\n/**\n * Gulp Email.\n */\nfunction GulpEmail(opts, cb) {\n\n\tthis.fullContent = '';\n\tthis.default = {};\n\tthis.cb = cb || this.callback;\n\tthis.options = extend(this.default, opts);\n\tthis.stream = new Transform({objectMode: true});\n\n\tthis.stream._transform = function(chunk, encoding, callback){\n\t\tvar fullPath = null,\n\t\t\tfile = {},\n\t\t\trelative = chunk.relative;\n\n\t\tfile.base = chunk.base;\n\t\tfile.contents = chunk.contents;\n\n\t\tfile.extname = Path.extname(relative);\n\t\tfile.basename = Path.basename(relative, file.extname);\n\t\tfile.dirname = Path.dirname(relative);\n\t\tfile.newDirname = utils.fixDirName(file.dirname);\n\t\tfullPath = file.newDirname + file.basename + file.extname;\n\t\tfile.path = Path.join(chunk.base, fullPath);\n\n\t\tcallback(null, self.readContent(file));\n\n\t};\n\n\tthis.stream.on('end', function() {\n\t\t//console.log(self.fullContent);\n\t\tself.sendEmail(self.prepareCurl(self.fullContent));\n\t});\n\n\tvar self = this;\n\n\treturn this.stream;\n}\n\nGulpEmail.prototype.readContent = function(file){\n\tvar currentContent = file.contents.toString();\n\tthis.fullContent += currentContent;\n};\n\nGulpEmail.prototype.prepareCurl = function(content){\n\tvar key,\n\t\tvalues,\n\t\targs = ['curl', '--no-buffer', '--show-error', '--silent'],\n\t\tsettings = this.options,\n\t\tchildrensCounter,\n\t\trequest,\n\t\thaveTextHtml = false,\n\t\tsubvalues;\n\n\tfor (key in settings) {\n\t\tvalues = Array.isArray(settings[key]) ? settings[key] : [settings[key]];\n\t\tvalues.forEach(function(value) {\n\t\t\tchildrensCounter = 0;\n\t\t\tkey = key.replace('_', '-');\n\t\t\tif (key !== 'url') {\n\t\t\t\targs.push(\"--\" + key);\n\t\t\t}\n\t\t\tif (true !== value) {\n\t\t\t\tif (typeof value === 'object') {\n\t\t\t\t\tfor (var subkey in value) {\n\t\t\t\t\t\tsubvalues = Array.isArray(value[subkey]) ? value[subkey] : [value[subkey]];\n\t\t\t\t\t\tsubvalues.forEach(function(subvalue) {\n\t\t\t\t\t\t\tchildrensCounter++;\n\t\t\t\t\t\t\tif (childrensCounter !== 1) {\n\t\t\t\t\t\t\t\targs.push(\"--\" + key);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\targs.push(subkey + \"='\" + subvalue + \"'\");\n\t\t\t\t\t\t\tif (subkey === 'html') {\n\t\t\t\t\t\t\t\thaveTextHtml = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (subkey === 'to') {\n\t\t\t\t\t\t\t\tconsole.log(chalk.yellow('Sending to: ') + chalk.yellow.bold(subvalue));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\targs.push(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tif (haveTextHtml === false) {\n\t\targs.push('--form-string');\n\t\tcontent = content.replace(/'/g, '\\\"');\n\t\t//console.log(content);\n\t\targs.push('html=\\'' + content + '\\'');\n\t}\n\n\trequest = args.join(\" \");\n\t//console.log(request);\n\n\treturn request;\n};\n\nGulpEmail.prototype.sendEmail = function(request){\n\tvar execute = new Execute(request, this.cb);\n};\n\nGulpEmail.prototype.callback = function(data, error){\n\tif (error) {\n\t\tconsole.log(error);\n\t}else{\n\t\tconsole.log(data);\n\t}\n\n};\n\n\n/**\n * Expose `GulpEmail`.\n */\n\nmodule.exports = GulpEmail;\n\n","/home/travis/build/npmtest/node-npmtest-gulp-email/node_modules/gulp-email/lib/utils.js":"/**\n * Utils.\n */\n\nvar Utils = {\n\tfixDirName: function (dirname){\n\t\tvar newDirname = \"\";\n\t\tif (dirname.toString().indexOf(\".\") === -1) {\n\t\t\tnewDirname = dirname + \"/\";\n\t\t}\n\t\treturn newDirname;\n\t},\n\tgetFolderName: function (base, dirname){\n\t\tvar arrayFolders = (base + dirname).match(/[a-zA-Z0-9_-]+\\/+/gi),\n\t\t\tfolderName = arrayFolders[arrayFolders.length -1];\n\t\t\tfolderName = folderName.replace(\"/\", \"\");\n\t\treturn folderName;\n\t}\n};\n\n\n/**\n * Expose `Utils`.\n */\n\nmodule.exports = Utils;\n","/home/travis/build/npmtest/node-npmtest-gulp-email/node_modules/gulp-email/lib/execute.js":"/**\n * Module dependencies.\n */\n\nvar exec = require(\"child_process\").exec;\n\n/*\n * Execute.\n *\n */\n\nvar Execute = function Execute(command, callback) {\n  this.execute(command, callback);\n};\n\n/**\n * Execute prototype.\n */\n\n\n/**\n * Execute Command.\n */\nExecute.prototype.execute = function(command, callback){\n  exec(command, function (error, stdout, stderr) {\n  \tif (error) {\n  \t\tcallback(stdout, error);\n  \t}else{\n  \t\tcallback(JSON.parse(stdout), error);\n  \t}\n  });\n};\n\n\n/**\n * Expose `Execute`.\n */\nmodule.exports = Execute;\n","/home/travis/build/npmtest/node-npmtest-gulp-email/node_modules/gulp-email/gulpfile.js":"'use strict';\n\nvar gulp = require('gulp'),\n\tjshint = require('gulp-jshint'),\n\tclean = require('gulp-rimraf'),\n\tstylish = require('jshint-stylish'),\n\tcomplexity = require('gulp-complexity');\n\nvar path = { src: {} };\n\npath.src.js = ['./index.js', './lib/*.js'];\npath.src.complexity = ['./index.js', './lib/*.js'];\n\ngulp.task('default', ['lint'], function() {\n\tconsole.log('All the Javascript.');\n});\n\ngulp.task('lint', function() {\n\treturn gulp.src(path.src.js)\n\t\t.pipe(jshint('.jshintrc'))\n\t\t.pipe(jshint.reporter('jshint-stylish'))\n\t\t.pipe(jshint.reporter('fail'));\n});\n\ngulp.task('watch', function () {\n\tvar javascriptTasks = ['lint'];\n\n\tgulp.watch(path.src.js, javascriptTasks);\n});\n\n/*\ngulp.task('complexity', function(){\n\treturn gulp.src(path.src.complexity)\n\t\t.pipe(complexity());\n});\n*/\n\nvar email = require('./index');\n\nvar options = {\n\tuser: 'api:key-bfc71afead753d73cef11c5485c1fd2b',\n\turl: 'https://api.mailgun.net/v3/sandbox4a0fe54c0059454483eff6624145da45.mailgun.org/messages',\n\tform: {\n\t\tfrom: 'Jamir Kaleb <jamir.kaleb@gmail.com>',\n\t\tto: 'Jan Sanchez Hotmail <joejansanchez@hotmail.com>',\n\t\tsubject: 'Nuevo mensaje de correo !!!',\n\t\ttext: 'Texto plano del mensaje, esto se ve?'\n\t}\n};\n\n\ngulp.task('email', function () {\n\treturn gulp.src('./demo/html/*.html')\n\t.pipe(email(options, function(data, error){\n\t\tconsole.log(data.message);\n\t}));\n});\n"}